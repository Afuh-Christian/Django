

Now we want to simplify the permissions class by creating a mixin 

1....move permissions.py to api folder

2....

api
mixins.py
from rest_framework import permissions
from .permissions import IsStaffEditorPermission

class StaffEditorPermissionMixin():
    permission_classes = [permissions.IsAdminUser,IsStaffEditorPermission]

#.............................................................................
    #Now we can reuse this in any view that needs it 
    #Any view that allows for the permission class to be added
#.............................................................................

##########################################################################################

products
views.py

from api.mixins import StaffEditorPermissionMixin


class ProductListCreateAPIView(generics.ListCreateAPIView,
#.............................................................................
                                StaffEditorPermissionMixin):
#.............................................................................
    queryset = Product.objects.all()
    serializer_class = ProductSerializer
   
#..................................Now the permission class is not needed...........................................
    # permission_classes = [permissions.IsAdminUser, IsStaffEditorPermission]
#...................................................................................

    def perform_create(self, serializer):
        #serializer.save(user= self.request.user)
        print(serializer.validated_data)
        title = serializer.validated_data.get('title')
        content = serializer.validated_data.get('content') 
        
        if content is None:
            content = title
        serializer.save(content=content)

product_list_create_view = ProductListCreateAPIView.as_view()



# listAPIView 

class ProductListAPIView(generics.ListAPIView,
#...................................................................................
                            StaffEditorPermissionMixin):
#...................................................................................
    queryset = Product.objects.all()
    serializer_class = ProductSerializer    
    # permission_classes = [permissions.IsAdminUser, IsStaffEditorPermission]

product_list_view = ProductListAPIView.as_view()


#update and  ... cbv 

class ProductUpdateAPIView(generics.UpdateAPIView,
#...................................................................................
                            StaffEditorPermissionMixin):
#...................................................................................
    queryset = Product.objects.all()
    serializer_class = ProductSerializer
    lookup_field = 'pk'
    # permission_classes = [permissions.IsAdminUser, IsStaffEditorPermission]

    def perform_update(self, serializer):
        instance = serializer.save()
        if not instance.content:
            instance.content = instance.title
            ##

product_update_view = ProductUpdateAPIView.as_view()

#delete..

class ProductDestroyAPIView(generics.DestroyAPIView
#...................................................................................
                            ,StaffEditorPermissionMixin):
#...................................................................................
    queryset = Product.objects.all()
    serializer_class = ProductSerializer
    lookup_field = 'pk'
    # permission_classes = [permissions.IsAdminUser, IsStaffEditorPermission]

    def perform_destroy(self, instance):
        super().perform_destroy(instance)


product_destroy_view = ProductDestroyAPIView.as_view()




#########################
Remember that we configured everything so that the some users can have permissions set
by the super user from the admin panell 

we are setting everything at the admin panel



Mixins a variety of other users 
check the documentation to view them



