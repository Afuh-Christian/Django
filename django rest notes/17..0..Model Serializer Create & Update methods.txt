What if  everytime , you create a product , you want to have a 1 auth email send to someone


########################################################################
serializers.py

from rest_framework import serializers 
from rest_framework.reverse import reverse


from .models import Product 

class ProductSerializer(serializers.ModelSerializer):
    my_discount = serializers.SerializerMethodField(read_only=True)
    edit_url = serializers.SerializerMethodField(read_only=True)

    url = serializers.HyperlinkedIdentityField(view_name="product-detail",lookup_field='pk')
#...................................................................
    email = serializers.EmailField(write_only=True)
#...................................................................

    class Meta:
        model = Product 
        fields = [
#...................................................................
            'email',
#...................................................................
            'url',
            'edit_url',
        'id','title','content','price',
        'sale_price',
        'my_discount'
        ]

    def get_edit_url(self,obj):
        request = self.context.get('request')
        if request is None:
            return None
        return reverse("product-update",kwargs={"pk":obj.pk}, request=request) 
  

    def get_my_discount(self,obj):
        try:
            return obj.get_discount()
        except:
            return None

NB..........
......1...Leaving out write_only in email = serializers.EmailField(write_only=True)
		will cause an error,,...(that it's not found in the product model)
		but we are doing something else 

.......2...the ProductSerializer will take the email data and create it in the product model itself
           solution
		...We can override the default method create()



##############################################################################################################


serializers.py

from rest_framework import serializers 
from rest_framework.reverse import reverse


from .models import Product 

class ProductSerializer(serializers.ModelSerializer):
    my_discount = serializers.SerializerMethodField(read_only=True)
    edit_url = serializers.SerializerMethodField(read_only=True)

    url = serializers.HyperlinkedIdentityField(view_name="product-detail",lookup_field='pk')
    email = serializers.EmailField(write_only=True)

    class Meta:
        model = Product 
        fields = [
        'url',
        'edit_url',
        'email',
        'id',
        'title',
        'content',
        'price',
        'sale_price',
        'my_discount'
        ]
#...........................................................................
    def create(self, validated_data):
        email = validated_data.pop('email')
        obj =  super().create(validated_data)
        print(email,obj)
        return obj
        #return Product.objects.create(**validated_data) #######  ** means unpaking the validated data
#...........................................................................

    def get_edit_url(self,obj):
        request = self.context.get('request')
        if request is None:
            return None
        return reverse("product-update",kwargs={"pk":obj.pk}, request=request) 
  

    def get_my_discount(self,obj):
        try:
            return obj.get_discount()
        except:
            return None


Done.....We able to successfully create a new product ..... the print statement in the functions 
prints out eg....

James@gmail.com Product object (16)

################################################################################################################################################################################
################################################################################################################################################################################


####################################
We can also do this in the views ......In the create method
#####################################

views.py


class ProductListCreateAPIView(StaffEditorPermissionMixin,generics.ListCreateAPIView):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer
    # authentication_classes = [
    #     authentication.SessionAuthentication,
    #    TokenAuthentication
    #     ]
    # permission_classes = [permissions.IsAdminUser, IsStaffEditorPermission]

    def perform_create(self, serializer):
        #serializer.save(user= self.request.user)
        print(serializer.validated_data)
#.........................................................................
        email = serializer.validated_data.pop('email')
        print(email)
#.........................................................................
        title = serializer.validated_data.get('title')
        content = serializer.validated_data.get('content') 
        
        if content is None:
            content = title
        serializer.save(content=content)

product_list_create_view = ProductListCreateAPIView.as_view()

###################################################################

serializers.py


from rest_framework import serializers 
from rest_framework.reverse import reverse


from .models import Product 

class ProductSerializer(serializers.ModelSerializer):
    my_discount = serializers.SerializerMethodField(read_only=True)
    edit_url = serializers.SerializerMethodField(read_only=True)

    url = serializers.HyperlinkedIdentityField(view_name="product-detail",lookup_field='pk')
    email = serializers.EmailField(write_only=True)

    class Meta:
        model = Product 
        fields = [
        'url',
        'edit_url',
        'email',
        'id',
        'title',
        'content',
        'price',
        'sale_price',
        'my_discount'
        ]

    def create(self, validated_data):
#........................................................................
        obj =  super().create(validated_data)
#........................................................................
        return obj
       


    def get_edit_url(self,obj):
        request = self.context.get('request')
        if request is None:
            return None
        return reverse("product-update",kwargs={"pk":obj.pk}, request=request) 
  

    def get_my_discount(self,obj):
        try:
            return obj.get_discount()
        except:
            return None




.......this works thesame ......and you'll need ....it also prints out the requested email to the console
...this is because of the save method 
.....serializers.save is being called in 2 places....create , update...so we have to also overide the update in ProductSerializers too

class ProductSerializer(...)
........
#.........................This is not Mandatory.....use it only when your project actually needs it..........................................   
    def update(self, instance, validated_data):
        email = validated_data.pop('email')
        return super().update(instance, validated_data)
#...........................................................................................................................................


################################################################################################################################################################################
################################################################################################################################################################################
################################################################################################################################################################################
################################################################################################################################################################################

This is usefull if you just want an arbitray field to your Models ........

















