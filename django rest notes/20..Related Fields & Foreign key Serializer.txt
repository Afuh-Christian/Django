..............Related Fields or Foreign key Serializer......................4:08:42


 python manage.py shell

>>> from products.models import Product
>>> prod_obj = Product.objects.first()
>>> user = prod_obj.user
>>> user_products = user.product_set.all()
>>> user
<User: staff>
>>> prod_obj
<Product: Product object (1)>
#.....................................................................................
""""to check all products associated to a particular user"""
>>> user_products
<QuerySet [<Product: Product object (1)>, <Product: Product object (2)>,
 <Product: Product object (3)>, <Product: Product object (4)>]>
#..................................a Revserse relationship...................................................
>>>


###########################################################################################
###########################################################################################
We can enrich our serializer based on this relaltionship ......


method 1.........Now we can see the name of the user for every produact
###########################################################################################

class ProductSerializer(serializers.ModelSerializer):

#...........................................................................................
    my_user_data = serializers.SerializerMethodField(read_only=True)

    def get_my_user_data(self, obj):
        return {
            "username":obj.user.username
        }
#...........................................................................................


    my_discount = serializers.SerializerMethodField(read_only=True)
    edit_url = serializers.SerializerMethodField(read_only=True)

    url = serializers.HyperlinkedIdentityField(view_name="product-detail",lookup_field='pk')

    title = serializers.CharField(validators=[unique_product_title,validate_title_no_hello])

    class Meta:
        model = Product 
        fields = [
        'user',

        'url',
        'edit_url',
        'id',
     
        'title',
        'content',
        'price',
        'sale_price',
        'my_discount',
#................................
	my_user_data
#................................
        ]

output ..........

"url": "http://127.0.0.1:8000/api/products/11/",
        "edit_url": "http://127.0.0.1:8000/api/products/11/update/",
        "id": 11,
        "title": "Christian",
        "content": "Is a django developer",
        "price": "99.99",
        "sale_price": "79.99",
        "my_discount": "122",
        "my_user_data": {
            "username": "christian"
        }
###################################################################################################################    
##################################################################################################################
##################################################################################################################
###################################################################################################################


...........METHOD 2..................

-1....create new serializer
######################################################
 api
   serializers.py
from rest_framework import serializers 

class UserPublicSerializer(serializers.Serializer):
    username = serializers.CharField(read_only=True)
-2.....
######################################################
products
   serializers.py


class ProductSerializer(serializers.ModelSerializer):
#........................WE user the read_only twice because if the future we might have to choose which item
#........................  would be read only...........................................
    user = UserPublicSerializer(read_only=True)
#...................................................................
   
    class Meta:
        model = Product 
        fields = [
#.......................
        'user',
#.......................
        'url',
        'edit_url',
        'id',
        'title',
        'content',
        'price',
        'sale_price',
        'my_discount',
        'my_user_data'
        ]

output
#################
 {
        "user": {
            "username": "christian"
        },
        "url": "http://127.0.0.1:8000/api/products/11/",
        "edit_url": "http://127.0.0.1:8000/api/products/11/update/",
        "id": 11,
        "title": "Christian",
        "content": "Is a django developer",
        "price": "99.99",
        "sale_price": "79.99",
        "my_discount": "122",
      
    },

######################################################################################
################################################################

WE can easily change what the representation user to owner


class ProductSerializer(serializers.ModelSerializer):
#.................................................................................
    owner = UserPublicSerializer(source = 'user' , read_only=True)
#.................................................................................
    class Meta:
        model = Product 
        fields = [
#.................................................................................        
	'owner',
#.................................................................................
        'url',
        'edit_url',
        'id',
        'title',
        'content',
        'price',
        'sale_price',
        'my_discount',
        'my_user_data'
        ]
################################################################
################################################################

You can do same for email


class ProductSerializer(serializers.ModelSerializer):
#..................................................................................
    email = serializers.CharField(source='user.email' , read_only=True)
#..................................................................................

    class Meta:
        model = Product 
        fields = [
        'owner',
#...............................
        'email',
#...............................
        'url',
        'edit_url',
        'id',
        'title',
        'content',
        'price',
        'sale_price',
        'my_discount',
        'my_user_data'
        ]
    
for username


class ProductSerializer(serializers.ModelSerializer):
  
#.......................................................................................
    a = serializers.CharField(source='user.username' , read_only=True)
#.......................................................................................

 
    class Meta:
        model = Product 
        fields = [
#.......................................................................................
            'a',
#.......................................................................................
        'owner',
        'email',
        'url',
        'edit_url',
        'id',
        'title',
        'content',
        'price',
        'sale_price',
        'my_discount',
        'my_user_data'
        ]










