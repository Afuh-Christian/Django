...Making staff an admin ad setting permisssions for admins only
Alternative way

#############################################################################################

views.py


views.py

from .permissions import IsStaffEditorPermission



class ProductListCreateAPIView(generics.ListCreateAPIView):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer
    authentication_classes = [authentication.SessionAuthentication]

    permission_classes = [IsStaffEditorPermission]


    def perform_create(self, serializer):
        #serializer.save(user= self.request.user)
        print(serializer.validated_data)
        title = serializer.validated_data.get('title')
        content = serializer.validated_data.get('content') 
        if content is None:
            content = title
        serializer.save(content=content)

product_list_create_view = ProductListCreateAPIView.as_view()



permissions.py

class IsStaffEditorPermission(permissions.DjangoModelPermissions):

    
    # Map methods into required permission codes.
    # Override this if you need to also provide 'view' permissions,
    # or if you want to provide custom permission codes.
#...........................................................................................
    perms_map = {
        'GET': ['%(app_label)s.view_%(model_name)s'],
        'OPTIONS': [],
        'HEAD': [],
        'POST': ['%(app_label)s.add_%(model_name)s'],
        'PUT': ['%(app_label)s.change_%(model_name)s'],
        'PATCH': ['%(app_label)s.change_%(model_name)s'],
        'DELETE': ['%(app_label)s.delete_%(model_name)s'],
    }
#...........................................................................................
#...........................................................................................

    def  has_permission(self, request, view):
        if not request.user.is_staff:
            return False
        return super().has_permission(request, view)
#...........................................................................................

#############################################################################################

At this point ... the permissions you allowed in the admin section now affects the api

That's abit wierd , I have no idea why that's happening

It should probably be because of the alternations we did above
######################################################################




################################################################################################################################################################
################################################################################################################################################################

 We can remove the part below so that all the permissions you need should not be in the custom
 permission

################################################################################################################################################################
################################################################################################################################################################
It'll still do thesame thing as above

Both solutions are similer



######################################################################
permissions.py

class IsStaffEditorPermission(permissions.DjangoModelPermissions):

    
    # Map methods into required permission codes.
    # Override this if you need to also provide 'view' permissions,
    # or if you want to provide custom permission codes.
    perms_map = {
        'GET': ['%(app_label)s.view_%(model_name)s'],
        'OPTIONS': [],
        'HEAD': [],
        'POST': ['%(app_label)s.add_%(model_name)s'],
        'PUT': ['%(app_label)s.change_%(model_name)s'],
        'PATCH': ['%(app_label)s.change_%(model_name)s'],
        'DELETE': ['%(app_label)s.delete_%(model_name)s'],
    }


######################################################################


Views.py

class ProductListCreateAPIView(generics.ListCreateAPIView):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer
    authentication_classes = [authentication.SessionAuthentication]

#....The ordering of the [] contents matter....................................................................................................
    permission_classes = [permissions.IsAdminUser, IsStaffEditorPermission]
#....................................................................................................


    def perform_create(self, serializer):
        #serializer.save(user= self.request.user)
        print(serializer.validated_data)
        title = serializer.validated_data.get('title')
        content = serializer.validated_data.get('content') 
        
        if content is None:
            content = title
        serializer.save(content=content)

product_list_create_view = ProductListCreateAPIView.as_view()

#**************************************************************************
-We have made it possible to customze athentication from the admin panel 
-We have made staff an Admin
#**************************************************************************

  permission_classes = [permissions.IsAdminUser, IsStaffEditorPermission]

	-The ordering matters because 
		1..it checks in it's an Admin first ... before apply the next check

 		2 ..for the first solution above , we could have a request.user.username = 'joker'
			-It'll always evaluate false if it does not equal


Unlike what we had before , this works for all the crud operations even if they do not have thesame route


 

