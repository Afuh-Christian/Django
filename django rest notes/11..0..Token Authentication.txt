We need this for our client.py to communicate with our backend

1....setting.py
	INSTALLED_APPS = [
		   "rest_framework.authtoken",
      ]
2....python manage.py migrate 

3...Now on the admin panell ,you'll seee
	AUTH TOKEN
		Tokens
4...Now You can create tokens for any given user

We want to be able to
 - create this tokens at anytime
 - delete this tokens when it calls for it

#****************************************************
To create the tokens
#****************************************************#****************************************************

we are creating an endpoint to generate the auth_tokens

#......api.......
urls.py 

from django.urls import path 
#................................................................................
from rest_framework.authtoken.views import obtain_auth_token
#................................................................................
urlpatterns = [
#................................................................................
   path('auth/',obtain_auth_token)
#................................................................................
]

###################################################################

#......products.......
views.py

class ProductListCreateAPIView(generics.ListCreateAPIView):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer
    authentication_classes = [
        authentication.SessionAuthentication,
#................................................................................
        authentication.TokenAuthentication
#................................................................................
        ]
    permission_classes = [permissions.IsAdminUser, IsStaffEditorPermission]

    def perform_create(self, serializer):
        #serializer.save(user= self.request.user)
        print(serializer.validated_data)
        title = serializer.validated_data.get('title')
        content = serializer.validated_data.get('content') 
        
        if content is None:
            content = title
        serializer.save(content=content)

product_list_create_view = ProductListCreateAPIView.as_view()


###################################################################

client.py

import json
import requests
#................................................................................
from getpass import getpass
#................................................................................

auth_endpoint = "http://127.0.0.1:8000/api/auth/" 

#Info about an existing user................................................................................
auth_response = requests.post(auth_endpoint,json = {'username':'staff' ,
 'password': getpass()}) 
#................................................................................
print(auth_response.json())

##########################################################################

endpoint = "http://127.0.0.1:8000/api/products/" 


output_response = requests.get(endpoint) 

print(output_response.json())


###################################################################

Console of client

Password:
{'token': '7055895ed114f5fe65abdc3b18c156bd64a578ef'}
{'detail': 'Authentication credentials were not provided.'}

Console of backend

Forbidden: /api/products/
[03/Mar/2022 08:14:06] ?[31;1m"GET /api/products/ HTTP/1.1" 403 58?[0m
[03/Mar/2022 08:14:06] ?[m"POST /api/auth/ HTTP/1.1" 200 52?[0m

###################################################################

Now we can redo what we have above 
creating a conditions with status code 200 as in the backend console

#####################

import json
import requests
from getpass import getpass

auth_endpoint = "http://127.0.0.1:8000/api/auth/" 


auth_response = requests.post(auth_endpoint,json = {'username':'staff' ,
 'password': getpass()}) 

print(auth_response.json())

##########################################################################

import json
import requests
from getpass import getpass

auth_endpoint = "http://127.0.0.1:8000/api/auth/" 


auth_response = requests.post(auth_endpoint,json = {'username':'staff' ,
 'password': getpass()}) 

print(auth_response.json())

#...............................................................................
if auth_response.status_code == 200:
    token = auth_response.json()['token']
    headers = {
        "Authorization": f"Token {token}"
    }
#...............................................................................
    endpoint = "http://127.0.0.1:8000/api/products/" 

#...............................................................................
    output_response = requests.get(endpoint,headers=headers) 
#...............................................................................

    print(output_response.json())


##########
Now  staff can now see all the products through the client console as required

We can just prompt the user for both username and password 
and the view items if permitted 


import json
import requests
from getpass import getpass

auth_endpoint = "http://127.0.0.1:8000/api/auth/" 

#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
username = input("What is your username: ")
password = getpass("What is your password: ")
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

#..............................................................................
auth_response = requests.post(auth_endpoint,json = {'username':username ,
 'password': password}) 
#..............................................................................

print(auth_response.json())


if auth_response.status_code == 200:
    token = auth_response.json()['token']
    headers = {
        "Authorization": f"Token {token}"
    }
    endpoint = "http://127.0.0.1:8000/api/products/" 


    output_response = requests.get(endpoint,headers=headers) 

    print(output_response.json())

###########
Console of client

What is your username:
What is your password:


