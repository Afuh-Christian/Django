........To display other products created by a particular user...............

...........................method 1.....................not a good practice
NB.....you can't do cyclic imports ....... That's why we declared the  UserProductInlineSerializer

#####################################################################################
api
serializers.py

from rest_framework import serializers 

#.......................................................................
class UserProductInlineSerializer(serializers.Serializer):
  
    title = serializers.CharField(read_only=True)

#.......................................................................   


class UserPublicSerializer(serializers.Serializer):
    username = serializers.CharField(read_only=True)
    id = serializers.IntegerField(read_only=True)
    other_products = serializers.SerializerMethodField(read_only=True)

#.......................................................................
    def get_other_products(self, obj):
        print(obj)
        user = obj
        my_products_qs = user.product_set.all()[:5]
        return UserProductInlineSerializer(my_products_qs, many=True).data

#.......................................................................


########################################################################################
products
serializers.py


class ProductSerializer(serializers.ModelSerializer):
#......................................................................
    owner = UserPublicSerializer(source = 'user' , read_only=True)
#......................................................................
    
    class Meta:
        model = Product 
        fields = [
#......................................................................
        'owner',
#......................................................................
        'url',
        'edit_url',
        'id',
        'title',
        'content',
        'price',
        'sale_price',
        'my_discount',
       
        ]


Output
########################
{
        "owner": {
            "username": "christian",
            "id": 1,
            "other_products": [
                {
                    "title": "New head"
                },
                {
                    "title": "School kids"
                },
                {
                    "title": "average people are herer"
                },
                {
                    "title": "Christian"
                },
                {
                    "title": "Christian"
                }
            ]
        },
        "url": "http://127.0.0.1:8000/api/products/5/",
        "edit_url": "http://127.0.0.1:8000/api/products/5/update/",
        "id": 5,
        "title": "New head",
        "content": "this is very new",
        "price": "99.99",
        "sale_price": "79.99",
        "my_discount": "122"
    },

Now to get the urls

api
serializers.py


class UserProductInlineSerializer(serializers.Serializer):
#...............................................................
    url = serializers.HyperlinkedIdentityField(
        view_name="product-detail",
        lookup_field='pk',
        read_only=True
        )
#...............................................................
    title = serializers.CharField(read_only=True)
    


class UserPublicSerializer(serializers.Serializer):
    username = serializers.CharField(read_only=True)
    id = serializers.IntegerField(read_only=True)
    other_products = serializers.SerializerMethodField(read_only=True)


    def get_other_products(self, obj):
#...............................................................
        #request = self.context.get('request')
#...............................................................
        print(obj)
        user = obj
        my_products_qs = user.product_set.all()[:5]
#...............................................................
        return UserProductInlineSerializer(my_products_qs, many=True,context = self.context).data
#...............................................................



................This topic was just about nesting serializers
......................lets see other examples about this......











