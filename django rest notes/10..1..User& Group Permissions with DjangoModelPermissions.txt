check documentiton

Nb....sessions and cookies is needed for javascript to work with the api

-login to admin and create a user
-register model to admin
-open same url in a new incognito window 
-use two different users on both windows
-so that you can have two sessions at thesame time
-check the {username} status under the permissions sections to set various permissions allowed 
 for the newly created user
-now the new user can login to the admin panel
...The superuser now has to set the various elements that can be accessed by the new user
staff     
-user permissions
	   Products
		can view products
                (the new user will just be able to view the products)

..Also You can also create a new group too and set restrictions and permissions

AUTHENTICATION AND AUTHORIZATION

 Groups
	add Group
		staffProductEditor
			filter
				can change products(there are others available)etc


   ############staff###########################

-Groups
	staffProductEditor
		filter
### Now the staff user can now view products(user permissions set by superuser) and can edit them(Group still by superuser)
### On the incognito window	

Now we copy the endpoint of our api in the rest framework and paste on the incognito window 
so that the staff should be the person logged in .... create a new tab before doing this
""""http://127.0.0.1:8000/api/products/""""


Using Django Model Permissions


Now the staff is allow to do all the crud operations

#####################################################################
All what we have done here works just on the admin panel

We still need to create a custom permission that will be able to do all what we have just seen 
in django itself

#####################################################################

We'll be using DjangoModelPermissions

class ProductListCreateAPIView(generics.ListCreateAPIView):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer
    authentication_classes = [authentication.SessionAuthentication]
#..............................................................................................
    permission_classes = [permissions.DjangoModelPermissions]
#..............................................................................................

    def perform_create(self, serializer):
        #serializer.save(user= self.request.user)
        print(serializer.validated_data)
        title = serializer.validated_data.get('title')
        content = serializer.validated_data.get('content') 
        
        if content is None:
            content = title
        serializer.save(content=content)

product_list_create_view = ProductListCreateAPIView.as_view()


