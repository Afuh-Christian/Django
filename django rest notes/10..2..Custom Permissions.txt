Custom Permissions 


ducumentation

DjangoModelPermissions
	The main defualt permissions are related to PUT,POST,DELETE,PATCH
		We create a custom model when it has to do with GET 

We'll create the custom permissions and apply them accross our entire api


start###########################################
Documentation ... Custom Permissions
##############################
..On this doc.........2 examples of permissions that you can use in your project
-Track and Block IP address
-To check if the owner is the one accessing
	you'll have to create and a foriegn user attribute for the model in question



#########################################################################################

permissions.py

from rest_framework import permissions


class IsStaffEditorPermission(permissions.DjangoModelPermissions):

    def has_permission(self,request,view):
        user = request.user                   #to see our user
        if request.user.is_staff:             #staff is the name of a particular user
            return True
        return False
        print(user.get_all_permissions())      #To sell all the permissions being allowed 

    # def has_object_permission(self,request,viwe,obj):
    #     return obj.owner == request.user 

    #Your can still copy and use the example from the documentations itself 
    

#########################################################################################

views.py
#...................................................................................
from .permissions import IsStaffEditorPermission
#...................................................................................


class ProductListCreateAPIView(generics.ListCreateAPIView):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer
    authentication_classes = [authentication.SessionAuthentication]
#...................................................................................
    permission_classes = [IsStaffEditorPermission]
#...................................................................................

    def perform_create(self, serializer):
        #serializer.save(user= self.request.user)
        print(serializer.validated_data)
        title = serializer.validated_data.get('title')
        content = serializer.validated_data.get('content') 
        if content is None:
            content = title
        serializer.save(content=content)

product_list_create_view = ProductListCreateAPIView.as_view()

#########################################################################################




Console on site 
NB run the site on a web browser that does not have staff or christian(superuser) logged in to it

you'll get 

set() 
set()..... on the console 

You won't be able to create and item if you are not the logged in user

if the route is 

http://127.0.0.1:8000/api/products/create/

with url  =  path('create/',product_list_create_view),

#####################################################################################
#####################################################################################
#####################################################################################


###################
Suppose view_items, create ,and other crud operations had thesame url path

e.g path('',.....)

then you can add other restrictions inside thesame class in permissions.py as shown bellow
#################



urls.py

    path('<int:pk>/update/',product_update_view),
    path('<int:pk>/delete/',product_destroy_view),
    path('<int:pk>/',product_detail_view),
    path('',product_list_create_view),
    path('',product_list_view) 


permissions.py



class IsStaffEditorPermission(permissions.DjangoModelPermissions):

    def has_permission(self,request,view):
        user = request.user                  
        print(user.get_all_permissions())      

        if request.user.is_staff:            
            if user.has_perm("products.add_products"):  #.......format:: "app_name.(crud operation)_(model_name)" ......     #prevents user from adding Products
                return True
            # if user.has_perm("products.delete_products"):      #prevents user from deleting Products
            #     return True
            # if user.has_perm("products.change_products"):      #prevents user from changing Products
            #     return True
            if user.has_perm("products.view_products"):      #prevents user from viewing Products
                return True
           
            return False
        return False 

NB..1...delete and change need separate classes because the do not have thesame url as 
	view and create

    2...Create and update must be included in the restrictions since they have thesame url
	else errors will occur 

#############################################################

  def  has_permission(self, request, view):
        if not request.user.is_staff:
            return False
        return super().has_permission(request, view)
##########################################################









































the various available permissions 
You can google the meanings of these various permissions

{'contenttypes.change_contenttype',
 'auth.add_permission',
 'auth.change_permission',
 'auth.view_group',
 'auth.view_permission',
 'auth.add_user', 
'sessions.change_session',
 'products.add_product', 
'admin.change_logentry',
 'sessions.add_session', 
'products.delete_product',
 'auth.delete_group', 
'admin.view_logentry', 
'auth.delete_permission', 
'products.view_product', 
'admin.delete_logentry',
 'auth.add_group', 
'contenttypes.view_contenttype',
 'sessions.delete_session',
 'auth.view_user', 
'sessions.view_session',
 'auth.delete_user',
 'auth.change_group',
 'auth.change_user', 
'contenttypes.delete_contenttype', 
'admin.add_logentry', 
'contenttypes.add_contenttype',
 'products.change_product'}





