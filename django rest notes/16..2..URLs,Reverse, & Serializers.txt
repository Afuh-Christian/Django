Another way to do this 


NB....this method works only for ModelSerializers
The best method

serializers.py

from rest_framework import serializers 
from rest_framework.reverse import reverse


from .models import Product 

class ProductSerializer(serializers.ModelSerializer):
    my_discount = serializers.SerializerMethodField(read_only=True)
    edit_url = serializers.SerializerMethodField(read_only=True)

#.................................................................................................................
    #NB HyperlinkedIdentityField only works on a ModelSerializer
    url = serializers.HyperlinkedIdentityField(view_name="product-detail",lookup_field='pk')
#.................................................................................................................

    class Meta:
        model = Product 
        fields = [
#.....................................................................
            'url',
#.....................................................................
            'edit_url',
        'id','title','content','price',
        'sale_price',
        'my_discount'
        ]

    def get_edit_url(self,obj):
        request = self.context.get('request')
        if request is None:
            return None
        return reverse("product-update",kwargs={"pk":obj.pk}, request=request) 
  

    def get_my_discount(self,obj):
        try:
            return obj.get_discount()
        except:
            return None


######################........Output look.......##########################


{
    "url": "http://127.0.0.1:8000/api/products/1/",
    "edit_url": "http://127.0.0.1:8000/api/products/1/update/",
    "id": 1,
    "title": "ok",
    "content": "iuadsfuasdf",
    "price": "667.09",
    "sale_price": "533.67",
    "my_discount": "122"
}

clicking on the link takes you to the page arcoding to the routing set 
