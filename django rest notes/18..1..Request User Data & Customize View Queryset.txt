continuation..,...

################################################################################

mixins.py


class UserQuerySetMixin():
    user_field = 'user'
    
    def get_queryset(self, *args, **kwargs):
        lookup_data = {} 
        lookup_data[self.user_field] = self.request.user
        qs = super().get_queryset(*args,**kwargs)
        return qs.filter(**lookup_data)

################################################################################

views.py

from api.mixins import {StaffEditorPermissionMixin,UserQuerySetMixin}


class ProductListCreateAPIView(
#...........................................order is needed...........................................
                                UserQuerySetMixin,
#......................................................................................
                                StaffEditorPermissionMixin,
                                generics.ListCreateAPIView
                                ):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer
   
    def perform_create(self, serializer):
        print(serializer.validated_data)
        title = serializer.validated_data.get('title')
        content = serializer.validated_data.get('content') 
        
        if content is None:
            content = title
        serializer.save(user=self.request.user,content=content)


product_list_create_view = ProductListCreateAPIView.as_view()

################################################################################

now we can add the UserQuerySetMixin on ever class that needs narrowing down

***********************************************************************************************
format of user field
lookup_data = {'user':self.request.user}
***********************************************************************************************
at return qs.filter(**lookup_data) ....self.user_field = self.request.user
***********************************************************************************************


##############################################################################
##############################################################################
##############################################################################
##############################################################################


remember we had made functionalities on the permissions part where a user had a whole lot of 
permissions allowed 

Let's rearrange what we have here to see the result 


mixins.py


class UserQuerySetMixin():
    user_field = 'user'
    def get_queryset(self, *args, **kwargs):
        user = self.request.user
        lookup_data = {} 
        lookup_data[self.user_field] = user
        qs = super().get_queryset(*args,**kwargs)
#..........returns the defualt..............................
        if user.is_staff:
            return qs
#..........................................................
        return qs.filter(**lookup_data)

..........OR>>>>>>>>>>>>>>>


class UserQuerySetMixin():
    user_field = 'user'
#........................alternative method ........................................
    allow_staff_view = False
#................................................................
    def get_queryset(self, *args, **kwargs):
        user = self.request.user
        lookup_data = {} 
        lookup_data[self.user_field] = user
        qs = super().get_queryset(*args,**kwargs)
#........................................
        if self.allow_staff_view and user.is_staff:
            return qs
#..........................................................
        return qs.filter(**lookup_data)