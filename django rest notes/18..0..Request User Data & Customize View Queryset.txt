3:55:00



This is good to know about 
...especially when you start having a bunch of users generating content for this rest api

...................
1....Lets update the Product Model So a user is attarched to it 
2....
######################################################################################

models.py

from django.db import models

#..................................................................
from django.conf import settings 
User = settings.AUTH_USER_MODEL #auth.User
#..................................................................

# Create your models here.


class Product(models.Model):
#...........................................................................................
    user = models.ForeignKey(User , default=1 , null=True , on_delete=models.SET_NULL)
#...........................................................................................

    title = models.CharField(max_length=120) 
    content = models.TextField(blank=True,null=True) 
    price = models.DecimalField(max_digits=15,decimal_places=2,default=99.99) 

    @property
    def sale_price(self):
        return "%.2f" %(float(self.price) * 0.8 )

    def get_discount(self):
        return "122"
###########################################
default= 1 means the first user is given ownership if no one has it
######################################################################################
class ProductSerializer(serializers.ModelSerializer):
  ...

    class Meta:
        model = Product 
        fields = [
#................................
        'user',
#................................
        'url',
        'edit_url',
        'id',
     
        'title',
        'content',
        'price',
        'sale_price',
        'my_discount'
        ]
    
    



###################################################################################

views.py


class ProductListCreateAPIView(StaffEditorPermissionMixin,generics.ListCreateAPIView):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer
   
    def perform_create(self, serializer):
        print(serializer.validated_data)
        title = serializer.validated_data.get('title')
        content = serializer.validated_data.get('content') 
        
        if content is None:
            content = title
        serializer.save(content=content)

#.....................We need args and kewargs when dealing with instance methods......................................
    def get_queryset(self, *args, **kwargs):
        request = self.request
        print(request.user)
        return super().get_queryset( *args, **kwargs)
#...........................................................

product_list_create_view = ProductListCreateAPIView.as_view()


the user is printed on the console a number of times according to the number of
products it has
###################################################################


filter it down to show just for a particular user that is currently logged in ..........
.....................................................................


views.py

class ProductListCreateAPIView(...):
 ....

#...........................................................
    def get_queryset(self, *args, **kwargs):
        qs = super().get_queryset( *args, **kwargs)
        request = self.request
        print(request.user)
        return qs.filter(user=request.user)
#...........................................................



We can still use the is_authenticated method to filter

#...........................................................
    def get_queryset(self, *args, **kwargs):
        qs = super().get_queryset( *args, **kwargs)
        user = self.request.user
        if not user.is_authenticated:
            return Product.objects.none()       
        return qs.filter(user_icontains=user)
#...........................................................


................Now we want that when we safe ...it should be for a particular user 




    def perform_create(self, serializer):
        print(serializer.validated_data)
        title = serializer.validated_data.get('title')
        content = serializer.validated_data.get('content') 
        
        if content is None:
            content = title
        serializer.save(user=self.request.user,content=content)

.............We can make all this to be a mixin.....................................






