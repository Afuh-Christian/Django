Check the django rest framework documentation to understand more of this

or to see all implementations of an inherited class view
-right click on view
-Go to definition



List all items..........^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
####################################################################################################

views.py


class ProductMixinView(
    mixins.ListModelMixin,
    generics.GenericAPIView):

    #listModelMixin gives us the ability to provide the queryset
    queryset = Product.objects.all()
    serializer_class = ProductSerializer

    def get(self, request, *args, **kwargs):
        return self.list(request, *args, **kwargs)  # list function is from the ListModelMixin
    
    #def post(self, request, pk)

product_mixin_view = ProductMixinView.as_view()

##################################################
urls.py

 path('',product_mixin_view)
##################################################
client.py

import json
import requests

endpoint = "http://127.0.0.1:8000/api/products/" 


output_response = requests.get(endpoint) 

print(output_response.json())

##################################################



Retrieve particular item..............................^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
########################################################################################################################################################################################################

##################################################
views.py 


class ProductMixinView(
    mixins.ListModelMixin,
#...................................................
    mixins.RetrieveModelMixin,  #Retrieving
#...................................................
    generics.GenericAPIView):

    queryset = Product.objects.all()
    serializer_class = ProductSerializer
#...................................................
    lookup_field = 'pk'                   #for retrieving....defualt if primary key , you can still alter it if you wish to
#...................................................

    def get(self, request, *args, **kwargs):
#...................................................
        print(args,kwargs)
        pk = kwargs.get("pk")             #We don't need to set pk= None at the arguement
        if pk is not None:                 
            return self.retrieve(request, *args, **kwargs)
#...................................................
        return self.list(request, *args, **kwargs)  
    
   

product_mixin_view = ProductMixinView.as_view()

##################################################

urls.py

path('<int:pk>/',product_mixin_view)

##################################################
clients.py

same as above






Create item..............................^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
########################################################################################################################################################################################################

##########################################################
views.py 


class ProductMixinView(
#...................................................
    mixins.CreateModelMixin,  #creating
#...................................................
    mixins.ListModelMixin,
    mixins.RetrieveModelMixin,  #Retrieving
    generics.GenericAPIView):

    queryset = Product.objects.all()
    serializer_class = ProductSerializer
    lookup_field = 'pk'                   #for retrieving....defualt if primary key , you can still alter it if you wish to

#...................................................    
    def post(self, request, *args, **kwargs):
        return self.create(request,*args,**kwargs)
#...................................................
product_mixin_view = ProductMixinView.as_view()

##########################################################

urls.py 

path('create/',product_mixin_view)

##########################################################

client.py


import json
import requests

endpoint = "http://127.0.0.1:8000/api/products/create/" 

data = {
    "title": "Christian ",
    "content" : "Is a django developer"
   
}

output_response = requests.post(endpoint, json=data) 

print(output_response.json())

##########################################################
# NB # You can also add a custom create function if you wish to ##########################################################

#Add this to the class above
#this is posible because the CreateAPIView extends GenericAPIView , CreateModelMixin

#..................................................................
    def perform_create(self, serializer):
        #serializer.save(user= self.request.user)
        print(serializer.validated_data)
        title = serializer.validated_data.get('title')
        content = serializer.validated_data.get('content') 
        
        if content is None:
            content = title
        serializer.save(content=content)

#..................................................................




####################################
####################################
Resulting view
views.py

# Mixns and Generic Views 

class ProductMixinView(
    mixins.CreateModelMixin,  #creating
    mixins.ListModelMixin,
    mixins.RetrieveModelMixin,  #Retrieving
    generics.GenericAPIView):

    queryset = Product.objects.all()
    serializer_class = ProductSerializer
    lookup_field = 'pk'                   #for retrieving....defualt if primary key , you can still alter it if you wish to

    def get(self, request, *args, **kwargs):
        print(args,kwargs)
        pk = kwargs.get("pk")             #We don't need to set pk= None at the arguement
        if pk is not None:                 
            return self.retrieve(request, *args, **kwargs)
        return self.list(request, *args, **kwargs)  
    
    def post(self, request, *args, **kwargs):
        return self.create(request,*args,**kwargs)

    def perform_create(self, serializer):
        #serializer.save(user= self.request.user)
        print(serializer.validated_data)
        title = serializer.validated_data.get('title')
        content = serializer.validated_data.get('content') 
        
        if content is None:
            content = "Alternate method for creating items"
        serializer.save(content=content)

product_mixin_view = ProductMixinView.as_view()





########################################################################
########################################################################








Update item..............................^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
########################################################################################################################################################################################################

##########################################################

Check the documentations to see all the other implementations

